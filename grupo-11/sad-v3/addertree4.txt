	-- Signals for P := 4
	-- SIGNAL carry_out_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
	-- SIGNAL adders_result_1 : STD_LOGIC_VECTOR(B * 2 - 1 DOWNTO 0);
	-- SIGNAL carry_out_2 : STD_LOGIC;
	-- SIGNAL adders_result_2 : STD_LOGIC_VECTOR((B + 1) - 1 DOWNTO 0);
    	---------------------------------------------------------------------
	-- Adder Tree implemented for P := 4
	-- adder_tree_4 : FOR i IN 0 TO 1 GENERATE

	-- 	adder1 : ENTITY work.adder
	-- 		GENERIC MAP(B)
	-- 		PORT MAP(
	-- 			absolutesOut((FSW - 1 - B * 2 * i) DOWNTO (FSW - B * (2 * i + 1))),
	-- 			absolutesOut((FSW - 1 - B * (2 * i + 1)) DOWNTO (FSW - B * (2 * i + 2))),
	-- 			adders_result_1(B * 2 - 1 - B * i DOWNTO B - B * i),
	-- 			carry_out_1(1 - i)
	-- 		);

	-- END GENERATE adder_tree_4;

	-- adder2 : ENTITY work.adder
	-- 	GENERIC MAP(B + 1)
	-- 	PORT MAP(
	-- 		carry_out_1(1) & adders_result_1(B * 2 - 1 DOWNTO B),
	-- 		carry_out_1(0) & adders_result_1(B - 1 DOWNTO 0),
	-- 		adders_result_2,
	-- 		carry_out_2
	-- 	);
	---------------------------------------------------------------------